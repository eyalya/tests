#TODO: remove nx when not needed

### CICD runs on the following terms: 
### Dev environment - Pr to dev + Merge to dev
### Stage environment - Creating Release branch + Pr to release branch
### Prod environment - Pr approved to main ###
 
name: main_workflow
run-name: Deploy Versrion ${{ github.ref_name }} to ${{ inputs.environment }}
on:
  # push:
  #   branches:
  #   - '**'
  workflow_dispatch:
    inputs:
      app: 
        type: choice
        description: Select the app to build
        required: true
        options:
        - affected
        - all
        - events-processor
        - alert-eval
        - engine-scheduler
        - alert-admin
        - station-admin
        - customer-admin
        - rule-engine
        - data-api
        - notification-admin
        - subscription-admin
        - msp-admin
        - report-generator
        - ecobox-api
        - engine-configurator
        - value-dashboard-api
      environment: 
        type: choice
        description: Select the environment
        required: true
        options:
        - dev
        - qa
        - stage
        - prod
      type: 
        type: choice
        description: Select the build type
        required: true
        options:
        - custom
        - hotfix
      run_integration: 
        type: boolean
        description: Run integration tests
      tag:   
        description: "Insert custom tag" 
  # pull_request:
  #   branches:
  #   - '**'
  #   - '!dev'
  #   types:
  #   - 'opened'
  #   - 'reopened'
  #   - 'synchronize'
  #   - 'closed'
  

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: write     
  repository-projects: write 
  actions: write

jobs:
  first: 
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      id: version_bump_checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set version ENV
      run: |
        ./validate_tag.sh -t "${{ inputs.type }}_${{ inputs.tag }}"
    - name: Check
      run: echo $APP_VERSION

      # - name: Run Integration Tests - All
      #   id: integration_test_all
      #   if: ${{ inputs.run_integration && inputs.app == 'all'}}
      #   run: echo Works
      # - name: Run Integration Tests - Affected
      #   id: integration_test_affected
      #   if: ${{ inputs.run_integration && inputs.app == 'affected' }}
      #   run: echo Works
      # - name: Run Integration Tests - Selected
      #   id: integration_test_selected
      #   if: ${{ inputs.run_integration && inputs.app != 'all' && inputs.app != 'affected' }}
      #   run: echo Works
  #     - name: Dump job context
  #       env:
  #         JOB_CONTEXT: ${{ toJson(job) }}
  #       run: echo "$JOB_CONTEXT"
  #     - name: Dump steps context
  #       env:
  #         STEPS_CONTEXT: ${{ toJson(steps) }}
  #       run: echo "$STEPS_CONTEXT"
  #     - name: Dump runner context
  #       env:
  #         RUNNER_CONTEXT: ${{ toJson(runner) }}
  #       run: echo "$RUNNER_CONTEXT"
  #     - name: Dump strategy context
  #       env:
  #         STRATEGY_CONTEXT: ${{ toJson(strategy) }}
  #       run: echo "$STRATEGY_CONTEXT"
  #     - name: Dump matrix context
  #       env:
  #         MATRIX_CONTEXT: ${{ toJson(matrix) }}
  #       run: echo "$MATRIX_CONTEXT"
      # - name: Show default environment variables
      #   run: |
      #     echo "Review state ${{ github.event }}"
  #         echo "The job_id is: $GITHUB_JOB"   # reference the default environment variables
  #         echo "The id of this action is: $GITHUB_ACTION"   # reference the default environment variables
  #         echo "The run id is: $GITHUB_RUN_ID"
  #         echo "The GitHub Actor's username is: $GITHUB_ACTOR"
  #         echo "GitHub SHA: $GITHUB_SHA"
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    # if: github.event.pull_request.merged && startsWith(github.head_ref, 'hotfix/')
    env:
      APPS: (events-processor alert-eval engine-scheduler alert-admin station-admin customer-admin rule-engine data-api notification-admin subscription-admin msp-admin report-generator ecobox-api engine-configurator value-dashboard-api)
    steps:
        - name: Checkout Repository
          id: version_bump_checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - id: test
          run: |
            echo ${{ inputs.run_integration }}
            echo "title"
            ${{ github.event.pull_request.title }}
            echo "body"
            ${{ github.event.pull_request.body }}
        # - run: |
        #     APPS=(events-processor alert-eval engine-scheduler alert-admin station-admin customer-admin rule-engine data-api notification-admin subscription-admin msp-admin report-generator ecobox-api engine-configurator value-dashboard-api)
        #     echo ${{ fromJSON(steps.test.outputs.apps) }}
        #     for item in "${${{ fromJSON(steps.test.outputs.apps) }}[@]}"
        #     do
        #         echo "hey $item"
        #     done
        #     echo hey
        # - name: Create Release
        #   id: create_release
        #   uses: ncipollo/release-action@v1
        #   env:
        #     LAST_VERSION: "1.0.0"
        #     VERSION: "1.0.1"
        #   with:
        #     tag: ${{ env.VERSION }}
        #     name: Ecoplant-Release-${{ env.VERSION }}
        #     body: |
        #       ## What's Changed:
        #       ### ${{ github.event.pull_request.title }}
        #       ${{ github.event.pull_request.body }}
              
        #       ________________________________________________________
        #       Full Changelog: Ecoplant-Release-${{ env.VERSION }}...Ecoplant-Release-${{ env.LAST_VERSION }}
      # - name: Integration Tests - All Envs    
      #   id: integration_test
      #   run: |
      #     echo $GITHUB_REF_NAME
      #   continue-on-error: true
      # - name: Set ENV specific variables
      #   id: crate-run-envs
      #   env:
      #     VER: "pr${{ github.event.number }}_${{ github.event.pull_request.title }}_${{ github.event.pull_request.head.sha }}"
      #   run: |
      #     echo $VER
      # - name: Standard checkout - All Beside Merge To Dev
      #   uses: actions/checkout@v3
      #   with:
      #       ref: 'main'
      #       fetch-depth: '0'
      #       token: ${{ secrets.MONOREPO_AUTH_TOKEN }}
      # - run: echo "TARGET_ENV=dev" >> $GITHUB_ENV
      # - name: test
      #   id: integration_test
      #   if: ${{ env.TARGET_ENV == 'stage' || (env.TARGET_ENV == 'dev' && !github.event.pull_request.merged ) }}
      #   run: |
      #     git log --pretty=format:"%H" --merges -n 1 --skip=1
      #     echo NX_BASE=$(git log --pretty=format:"%H" --merges -n 1 --skip=1) 
      #     echo NX_HEAD=$(git log --pretty=format:"%H" --merges -n 1)          
      #     echo NX_BASE=$(git log --pretty=format:"%H" --merges -n 1 --skip=1)  >> $GITHUB_ENV
      #     echo NX_HEAD=$(git log --pretty=format:"%H" --merges -n 1)           >> $GITHUB_ENV
      #     echo $NX_BASE
      #     echo $NX_HEAD
      #     echo test1 > ddd
      #     echo "surf_master=true" >> $GITHUB_OUTPUT
      # # - name: Setup upterm session
      # #   uses: lhotari/action-upterm@v1
      # - run: |
      #     echo $NX_BASE
      #     unset NX_BASE
      #     echo $NX_BASE
      # - run: |
      #     echo "BASE: ${{ env.NX_BASE }}"
      #     echo "HEAD: ${{ env.NX_HEAD }}"
      # - name: test1
      #   id: test1
      #   if: github.event.pull_request.merged && env.TARGET_ENV == 'prod' && github.event.review.user.login == 'eyalya'
      #   env:
      #     TARGET_ENV: prod
      #     SURF_MASTER: ${{ steps.integration_test.outputs.surf_master }}
      #   run: |
      #     echo $SURF_MASTER
      # - name: Commit changes
      #   uses: EndBug/add-and-commit@v9
      #   with:
      #     author_name: automation-chores
      #     author_email: automation-chores@ecoplant.co
      #     message: 'chore: bump version BLA'
      #     add: 'ddd'
      # - name: Push version - Merge To Dev
      #   uses: github-actions-x/commit@v2.9
      #   with:
      #     github-token: ${{ secrets.MONOREPO_AUTH_TOKEN }}
      #     push-branch: 'dev'
      #     commit-message: 'chore: bump version BLA'
      #     files: ddd
      #     name: automation-chores
      #     email: automation-chores@ecoplant.co
    # needs:
    #   - first
    # if: ${{ !github.event.pull_request.merged && github.event.review.state == 'approved' }} && ${{ github.event.review.user.login == 'eyal-midlink' || github.event.review.user.login == 'eyalya'}}
    # steps:
    #   - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
    #   - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
    #   - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    #   - name: Check out repository code
    #     uses: actions/checkout@v3
    #   - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
    #   - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
    #   - name: List files in the repository
    #     run: |
    #       ls ${{ github.workspace }}
    #   - run: echo "üçè This job's status is ${{ job.status }}."
